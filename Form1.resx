<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        kjPk42Kds46nhcny9GtVl7Z1XG1H3n1YcmhrR8/dZ5WerWS/7j0jb2Oj9/lDwnLGzZ/t+c+rHl0IaPZc
        uXbKpct39tk/1Pr/AJ/G/wDtH2hmnLOz6eFE/eXMWhDRwzfZJn+tWzf7j5nb2On9/lHo9Iy7s+P2ec+r
        Ng0QaOIcuThalcv/ALJZH/Nx51bZx1X9yfL0etOw8BTwtx5+r16HAWCqJc6bClmYqcVo2OX3qimvXtDF
        V8bk/eWzRs3CUcLdP2h7lJRUdGzkUlLBTt6oo0YnwQ1qrlVfWnVtUW6KOrGjIPh9gAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAf//Z
</value>
  </data>
</root>